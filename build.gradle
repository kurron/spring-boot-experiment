buildscript {
    ext {
        // not very DRY but we have a chicken-and-egg situation
        springBootVersion = '1.0.0.RC5'
    }

    repositories {
        maven { url 'http://repo.spring.io/libs-snapshot' }
        mavenLocal()
    }
    dependencies {
        classpath( "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}" )
    }
}

repositories {
    mavenCentral()
    maven { url 'http://repo.spring.io/milestone' }
}

description = 'Example Services.'
group = 'com.transparent.asgard'

    apply plugin: 'groovy'
    apply plugin: 'spring-boot'
    apply plugin: 'war'
    apply plugin: 'project-report'

    ext {
        springBootVersion = '1.0.0.RC5'

        groovyVersion = '2.2.2'
        hamcrestVersion = '1.3'
        httpClientVersion = '4.3.3'
        jacksonVersion = '2.3.1'
        jodaTimeVersion = '2.2'
        junitVersion = '4.11'
        logbackVersion = '1.1.1'
        logfacesAppenderVersion = '4.0.1'
        mongoDbDriverVersion = '2.11.4'
        servletApiVersion = '3.1.0'
        slf4jVersion = '1.7.6'
        spockVersion = '0.7-groovy-2.0'
        springAmqpVersion = '1.2.1.RELEASE'
        springDataMongoDbVersion = '1.4.1.RELEASE'
        springDataRestVersion = '2.0.1.RELEASE'
        springFrameworkVersion = '4.0.2.RELEASE'
        springHateoasVersion = '0.9.0.RELEASE'
        springIntegrationVersion = '3.0.1.RELEASE'
        springSecurityVersion = '3.2.2.RELEASE'
    }

    configurations {
        providedRuntime
    }

    configurations.all {
        exclude group: 'commons-logging'
        exclude module: 'junit-dep'
        exclude module: 'hamcrest-core'
    }

    dependencies {
        compile "org.codehaus.groovy:groovy-all:${groovyVersion}"

        compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-amqp:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-data-rest:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-integration:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-remote-shell:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
        providedRuntime "org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}"

        // by default Spring Boot will grab the pieces, I'm just being a bit controlling and doing it explicitly
        compile "org.springframework:spring-aop:${springFrameworkVersion}"
        compile "org.springframework:spring-core:${springFrameworkVersion}"
        compile "org.springframework:spring-context:${springFrameworkVersion}"
        compile "org.springframework:spring-web:${springFrameworkVersion}"
        compile "org.springframework:spring-webmvc:${springFrameworkVersion}"
        compile "org.springframework:spring-tx:${springFrameworkVersion}"

        compile "org.springframework.integration:spring-integration-core:${springIntegrationVersion}"
        compile "org.springframework.integration:spring-integration-file:${springIntegrationVersion}"
        compile "org.springframework.integration:spring-integration-http:${springIntegrationVersion}"
        compile "org.springframework.integration:spring-integration-ip:${springIntegrationVersion}"
        compile "org.springframework.integration:spring-integration-stream:${springIntegrationVersion}"
        compile "org.springframework.integration:spring-integration-amqp:${springIntegrationVersion}"

        compile "org.springframework.amqp:spring-rabbit:${springAmqpVersion}"

        compile "org.springframework.hateoas:spring-hateoas:${springHateoasVersion}"

        compile "org.springframework.data:spring-data-rest-webmvc:${springDataRestVersion}"

        compile "org.springframework.data:spring-data-mongodb:${springDataMongoDbVersion}"

        compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
        compile "org.springframework.security:spring-security-web:${springSecurityVersion}"

        compile "org.slf4j:slf4j-api:${slf4jVersion}"
        compile "org.slf4j:slf4j-ext:${slf4jVersion}"
        compile "org.slf4j:jul-to-slf4j:${slf4jVersion}"
        compile "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
        compile "org.slf4j:jcl-over-slf4j:${slf4jVersion}"

        compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        compile "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jacksonVersion}"

        runtime "ch.qos.logback:logback-classic:${logbackVersion}"
        runtime "org.mongodb:mongo-java-driver:${mongoDbDriverVersion}"

        testCompile "junit:junit:${junitVersion}"
        testCompile( "org.spockframework:spock-core:${spockVersion}" ) { exclude module: 'groovy-all' }
        testCompile( "org.spockframework:spock-spring:${spockVersion}" ) { exclude module: 'groovy-all' }

        testCompile "org.springframework:spring-test:${springFrameworkVersion}"
        testCompile "org.springframework.integration:spring-integration-test:${springIntegrationVersion}"
        testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"

        testRuntime "org.apache.httpcomponents:httpclient:${httpClientVersion}"
    }

defaultTasks 'clean', 'projectReport', 'build'
